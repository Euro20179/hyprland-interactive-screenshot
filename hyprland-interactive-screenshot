#!/bin/bash

# `list_geometry` returns the geometry of the focused of visible windows. You can also get they title
# by setting a second argument to `with_description`. The geometry and the title are seperated by `\t`.
#
# Arguments:
#   $1: `focused` or `visible`
#   $2: `with_description` or nothing
#
# Output examples:
#   - with the `with_description` option:
#      12,43 100x200\tTermite
#   - without the `with_description` option:
#      12,43 100x200

function list_geometry () {
	[ "$2" = with_description ] && local append="\t\(.title)" || local append=
    if [ "$1" = focused ]; then
        hyprctl -j activewindow | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])'$append'"'
    else
        hyprctl -j clients | jq -r '.[] | select(.workspace.id | contains('$(hyprctl -j monitors | jq -r 'map(.activeWorkspace.id) | join(",")')')) | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])'$append'"'
    fi
}

command_exists () {
    command -v "$1" &> /dev/null
}

command_exists "jq" || {
    printf "%b%s%b\n" "\033[31m" "Jq must be installed for this" "\033[0[m"
    exit 1
}

WINDOWS=`list_geometry visible with_description`
FOCUSED=`list_geometry focused`

SAVEDIR=${HYPRLAND_INTERACTIVE_SCREENSHOT_SAVEDIR}
[ -z "$SAVEDIR" ] && SAVEDIR=${SWAY_INTERACTIVE_SCREENSHOT_SAVEDIR:=~}
mkdir -p -- "$SAVEDIR"
FILENAME="$SAVEDIR/$(date +'%Y-%m-%d-%H%M%S_screenshot.png')"
EXPENDED_FILENAME="${FILENAME/#\~/$HOME}"


if command_exists "hyprland-share-picker"; then
    CHOICE=$(hyprland-share-picker)
    case "$CHOICE" in
        screen:*)
            monitor="${CHOICE#screen:}"
            monitor_info="$(hyprctl monitors -j | jq '.[]|select(.name=="'"$monitor"'")')"
            x="$(jq -r '.x' <<< "$monitor_info")"
            y="$(jq -r '.y' <<< "$monitor_info")"
            width="$(jq -r '.width' <<< "$monitor_info")"
            height="$(jq -r '.height' <<< "$monitor_info")"
            ;;
        window:*)
            client_id="${CHOICE#window:}"
            client_info="$(hyprctl clients -j | jq '.[]|select(.address=="'"0x$client_id"'")')"
            read -r x y <<< "$(jq -r '.at|@tsv' <<< "$client_info")"
            read -r width height <<< "$(jq -r '.size|@tsv' <<< "$client_info")"
            echo "$x" "$y" "$width" "$height"

            ;;
        region:*)
            region="${CHOICE#region:}" ;;
    esac
else
    CHOICE=`rofi -dmenu -p 'Screenshot' <<<"
    fullscreen
    region
    focused
    $WINDOWS"`

    case $CHOICE in
        fullscreen)
            grim "$EXPENDED_FILENAME"
        ;;
        region)
            geometry="$(slurp)"
            read -r x_y w_h <<< "$geometry"
            IFS=, read -r x y <<< "$x_y"
            IFS=x read -r width height <<< "$w_h"
        ;;
        focused)
            client_data=$(hyprctl activewindow -j)
            read -r x y <<< "$(jq -r '.at|@tsv' <<< "$client_data")" 
            read -r width height <<< "$(jq -r '.size|@tsv' <<< "$client_data")" 
        ;;
        '')
            notify-send "Screenshot" "Cancelled"
            exit 0
            ;;
        *)
            GEOMETRY="`echo \"$CHOICE\" | cut -d$'\t' -f1`"
            read -r x_y w_h <<< "$GEOMETRY"
            read -r x y <<< "$x_y"
            read -r width height <<< "$w_h"
    esac

fi

grim -g "$x,$y ${width}x${height}" "$EXPENDED_FILENAME"

# If swappy is installed, prompt the user to edit the captured screenshot
if command -v swappy $>/dev/null
then
    EDIT_CHOICE=`rofi -dmenu -p 'Edit' -lines 2 << EOF
yes
no
EOF`

    case $EDIT_CHOICE in
        yes)
            swappy -f "$EXPENDED_FILENAME" -o "$EXPENDED_FILENAME"
            ;;
        no)
            ;;
        '')
            ;;
    esac
fi

wl-copy < "$EXPENDED_FILENAME"
rm "$EXPENDED_FILENAME"
